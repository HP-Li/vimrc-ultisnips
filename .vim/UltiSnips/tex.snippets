#genmatrix
priority -50

extends texmath

global !p

def create_mtable(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{table}[h]\n\\centering\n\\caption{" + "".join(['$'+str(1)]) + "}\n\\begin{tabular}{" + "".join(['$' + str(2)]) + "}\n\\toprule\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += "\\\\\\\n"

	final_str += old_spacing + "\\bottomrule\n\\end{tabular}\n\\end{table}$0"

	snip.expand_anon(final_str)
def create_matrix(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{matrix}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{matrix}$0"

	snip.expand_anon(final_str)

def create_pmatrix(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{pmatrix}\n"

	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{pmatrix}$0"

	snip.expand_anon(final_str)
#def add_row(snip):
#	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
#	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
#
#	snip.buffer[snip.line] = ''
#
#	final_str = old_spacing
#	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
#	final_str += " \\\\\\"
#
#	snip.expand_anon(final_str)
#
endglobal

pre_expand "create_matrix(snip)"
snippet "genmat(\d+)x(\d+)" "Generate matrix of width by height" r
endsnippet

pre_expand "create_pmatrix(snip)"
snippet "genpmat(\d+)x(\d+)" "Generate matrix of width by height" r
endsnippet

pre_expand "create_mtable(snip)"
snippet "genmtab(\d+)x(\d+)" "Generate matrix of width by height" r
endsnippet

snippet \do "\documentclass" b
\\documentclass{${1:article}}
$0
endsnippet
snippet \up "\usepackage" b
\\usepackage{$1}
$0
endsnippet

#frac
snippet "fr(ac)?" "Fraction" ir
\\frac{$1}{$2}$0
endsnippet
snippet v/ "VFraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet
snippet '(\d+)/(\d+)' "numberfrac" wr
\\frac{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

#mathematica
priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

#math
snippet mk "math" wA
$$1$$0
endsnippet
snippet dm "math" wA
\\[
$1
\\]
$0
endsnippet
snippet eqnn "euqation" b
\\begin{equation*}
	${1:${VISUAL}}
\\end{equation*}
$0
endsnippet
snippet eqs "equations" b
\\begin{equation}
\\begin{split}
	${1:${VISUAL}}
\\end{split}
\\end{equation}
endsnippet
snippet eqsnn "nonumberequations" b
\\begin{equation*}
\\begin{split}
	${1:${VISUAL}}
\\end{split}
\\end{equation*}
endsnippet
snippet eq "equation" b
\\begin{equation}
	${1:${VISUAL}}
\\end{equation}
$0
endsnippet
snippet sp "split" b
\\begin{split}
	${1:${VISUAL}}
\\end{split}$0
endsnippet
snippet al "align" b
\\begin{align}
	${1:${VISUAL}}
\\end{align}
$0
endsnippet
snippet alnn "align" b
\\begin{align*}
	${1:${VISUAL}}
\\end{align*}
$0
endsnippet

#section
snippet part "part" b
\part{${1:part name}}%
\label{prt:$1}
$0
endsnippet
snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha:$1}
$0
endsnippet
snippet sec "Section"
\section{${1:${VISUAL:section name}}}%
\label{sec:$1}
$0
endsnippet
snippet sec* "Section"
\section*{${1:${VISUAL:section name}}}%
\label{sec:$1}
$0
endsnippet
snippet sub "Subsection"
\subsection{${1:${VISUAL:subsection name}}}%
\label{sub:$1}
$0
endsnippet
snippet sub* "Subsection"
\subsection*{${1:${VISUAL:subsection name}}}%
\label{sub:$1}
$0
endsnippet
snippet ssub "Subsubsection"
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{ssub:$1}
$0
endsnippet
snippet ssub* "Subsubsection"
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssub:$1}
$0
endsnippet
snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par:$1}
$0
endsnippet
snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par:$1}
$0
endsnippet

#limet\Integrate
snippet lim "limt" i
\\lim_{${1:${VISUAL:x}} \to ${2:${VISUAL:nu}}}$0
endsnippet
snippet 00 "infty" i
\\infty
endsnippet
priority 1000
#snippet int "int" i
#\\int
#endsnippet
#priority 10000
#snippet iint "dint" i
#\\iint
#endsnippet
#priority 100000
#snippet iiint "tint" i
#\\iiint
#endsnippet
snippet mathscr "mathscr" i
\\mathscr{${1:${VISUAL}}}$0
endsnippet

#script
snippet us "^{} superscript" i
^{${1:${VISUAL}}}$0
endsnippet
snippet ds "_{} subscript" i
_{${1:${VISUAL}}}$0
endsnippet
snippet sr "square" iA
^2
endsnippet
snippet sq "sqrt" i
\\sqrt{${1:${VISUAL}}}$0
endsnippet
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\\vec{`!p snip.rv=match.group(1)`}
endsnippet
priority 10
snippet "hat" "hat" ri
\\hat{$1}$0
endsnippet
priority 100
snippet "([a-zA-Z])hat" "hat" ri
\\hat{`!p snip.rv=match.group(1)`}
endsnippet
priority 10
snippet "bar" "bar" ri
\\bar{$1}$0
endsnippet
priority 100
snippet "([a-zA-Z])bar" "bar" ri
\\bar{`!p snip.rv=match.group(1)`}
endsnippet
priority 10
snippet "ovl" "overline" ri
\\overline{$1}$0
endsnippet
priority 100
snippet "([a-zA-Z])ovl" "overline" ri
\\overline{`!p snip.rv=match.group(1)`}
endsnippet
priority 10
snippet "wti" "widetilde" ri
\\widetilde{$1}$0
endsnippet
priority 100
snippet "([a-zA-Z])wti" "wti" ri
\\widetilde{`!p snip.rv=match.group(1)`}
endsnippet

#leftright
snippet () "left( right)" Ai
(${1:${VISUAL}})
endsnippet
snippet [] "left[ right]" Ai
[${1:${VISUAL}}]
endsnippet
snippet {} "left{ right}" Ai
{${1:${VISUAL}}}
endsnippet
snippet || "left| right|" Ai
|${1:${VISUAL}}|
endsnippet
#snippet "\<(.*?)\|" "bra" ri
#\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
#endsnippet
#snippet "\|(.*?)\>" "ket" ri
#\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
#endsnippet
snippet "\<(.*)\|" "bra" ri
\bra{`!p snip.rv = match.group(1)`}
endsnippet
snippet "\|(.*?)\>" "ket" ri
\ket{`!p snip.rv = match.group(1)`}
endsnippet
#snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
#`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
#endsnippet
snippet "\<(.*?)\|(.*?)\>" "\braket" riA
\\braket{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}
endsnippet

#amssymb
snippet bec "because" i
\\because
endsnippet
snippet thf "therefore" i
\\therefore
endsnippet

#Greek alphabet
snippet \al "alpha" i
\\alpha
endsnippet
snippet \be "beta" i
\\beta
endsnippet
snippet \ga "gamma" i
\\gamma
endsnippet
snippet \Ga "Gamma" i
\\Gamma
endsnippet
snippet \de "delta" i
\\delta
endsnippet
snippet \De "Delta" i
\\Delta
endsnippet
snippet \ep "epsilon" i
\\epsilon
endsnippet
snippet \vare "varepsilon" i
\\varepsilon
endsnippet
snippet \ze "zeta" i
\\zeta
endsnippet
snippet \e "eta" i
\\eta
endsnippet
snippet \th "theta" i
\\theta
endsnippet
snippet \varth "vartheta" i
\\vartheta
endsnippet
snippet \Th "Theta" i
\\Theta
endsnippet
snippet \io "iota" i
\\iota
endsnippet
snippet \ka "kappa" i
\\kappa
endsnippet
snippet \lam "lambda" i
\\lambda
endsnippet
snippet \Lam "Lambda" i
\\Lambda
endsnippet
snippet \si "sigma" i
\\sigma
endsnippet
snippet \Si "Sigma" i
\\Sigma
endsnippet
snippet \ups "upsilon" i
\\upsilon
endsnippet
snippet \Ups "Upsilon" i
\\Upsilon
endsnippet
snippet \ome "omega" i
\\omega
endsnippet
snippet \Ome "Omega" i
\\Omega
endsnippet

snippet "([A-Za-z])scr" "mathscr" ri
\\mathscr{`!p snip.rv=match.group(1)`}
endsnippet
snippet "([A-Za-z])cal" "mathscr" ri
\\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

#physics
snippet	\+ "dagger" i
^{\\dagger}
endsnippet

#arrow
snippet \ra "rightarrow" i
\\rightarrow
endsnippet

#evironment
snippet beg "begin end" b
\\begin{$1}
	$0
\\end{$1}
endsnippet

#beamer
snippet frame "frame" b
\\begin{frame}
$1
\\end{frame}
$0
endsnippet

snippet eql "eql" b
\\label{equ:p$1}
$0
endsnippet
#snippet box "Box"
#`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
#│ $1 │
#`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
#$0
#endsnippet
snippet "Roman(\d)" "Roman number" ir
\\uppercase\\expandafter{\\romannumeral`!p snip.rv=match.group(1)`}
endsnippet
snippet "roman(\d)" "roman number" ir
\\romannumeral`!p snip.rv=match.group(1)`
endsnippet
